<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.12">
  <POU Name="FB_ServerApplication" Id="{8c328707-d3ba-4b26-afb2-8f48582efdd3}" SpecialFunc="None">
    <Declaration><![CDATA[(*----------------------- Simple TCP/IP application. Adapt this code to match your needs. ----*)
FUNCTION_BLOCK FB_ServerApplication
VAR_IN_OUT
	fbTx		: FB_FrameFifo;(* TX fifo *)
	fbRx		: FB_FrameFifo;(* RX fifo *)
	fbLog	 	: FB_LogFifo;(* Log/debug/error fifo *)
END_VAR
VAR
	sFromClient	: T_MaxString := '';
	sToClient	: T_MaxString := '';
	sLogMessage : T_MaxString := '';
	nCounter	: UDINT;
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*------------------------------- Get received message strings ------------------------------------------*)
REPEAT

	fbRx.RemoveHead( );(* Fetch received string from rx fifo *)
	IF fbRx.bOk THEN(* Success *)

		(*TODO: Implement receive data handler *)
		nCounter := nCounter + 1;
		sFromClient := fbRx.sGet;
		sToClient 	:= sFromClient;

		(* Send received string back to the client *)
		fbTx.AddTail( sPut := sToClient );(* Add string to the tx fifo *)
		IF NOT fbTx.bOk THEN(* Fifo overflow => log error *)
			fbLog.Error( sMessage := 'FB_FrameFifo(sender)', nErrID := PLCPRJ_ERROR_SENDFIFO_OVERFLOW );
		END_IF
	END_IF

UNTIL NOT fbRx.bOk
END_REPEAT



(*------------------------------- Get log/error messages from log fifo ----------------------------------------*)
REPEAT
	fbLog.Remove( );
	IF fbLog.bOk THEN

		(* TODO: Implement log message handler *)
		sLogMessage := fbLog.sGet;

	END_IF
UNTIL NOT fbLog.bOk
END_REPEAT











]]></ST>
    </Implementation>
    <LineIds Name="FB_ServerApplication">
      <LineId Id="3" Count="44" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>